---
description: Swift Simplify Next.js + Supabase 项目结构指南
globs: 
alwaysApply: true
---

# Swift Simplify 项目结构指南

本项目是一个使用 Next.js 15、Better Auth 和 Supabase 构建的全栈应用程序启动模板。

## 核心目录结构

```
📦 swift-simplify-starter
├── 📂 app/                    # Next.js 15 App Router
│   ├── 📂 (auth)/            # 认证页面组
│   │   ├── login/           # 登录页面
│   │   ├── register/        # 注册页面
│   │   └── actions.ts       # 认证相关动作
│   ├── 📂 (dashboard)/       # 仪表板页面组
│   │   ├── dashboard/       # 主仪表板
│   │   ├── profile/         # 用户资料
│   │   └── layout.tsx       # 仪表板布局
│   ├── 📂 api/               # API 路由
│   │   ├── auth/            # Better Auth API 端点
│   │   └── stripe/          # Stripe 支付 API
│   ├── layout.tsx           # 根布局
│   ├── page.tsx             # 首页
│   └── globals.css          # 全局样式
├── 📂 components/            # 共享组件
│   ├── 📂 ui/               # ShadCN UI 基础组件
│   ├── 📂 layout/           # 布局组件（Header、Footer等）
│   └── 📂 user/             # 用户相关组件
├── 📂 hooks/                 # 自定义 React Hooks
│   ├── use-client-fetch.ts  # 数据获取 Hook
│   ├── use-client-mutation.ts # 数据修改 Hook
│   ├── useStripe.ts         # Stripe 集成 Hook
│   └── useUserPurchases.ts  # 用户购买管理 Hook
├── 📂 lib/                   # 工具函数和配置
│   ├── auth.ts              # Better Auth 服务器配置
│   ├── auth-client.ts       # Better Auth 客户端
│   ├── auth-context.tsx     # 认证上下文
│   ├── stripe.ts            # Stripe 客户端配置
│   ├── stripe-server.ts     # Stripe 服务器配置
│   └── utils.ts             # 通用工具函数
├── 📂 supabase/              # Supabase 配置
│   ├── client.ts            # 客户端实例
│   ├── server.ts            # 服务器实例
│   └── migrations/          # 数据库迁移文件
├── 📂 messages/              # 国际化文件
│   ├── en.json              # 英语翻译
│   ├── zh.json              # 中文翻译
│   └── ja.json              # 日语翻译
├── 📂 i18n/                  # 国际化配置
├── 📂 types/                 # TypeScript 类型定义
├── 📂 config/                # 配置文件
└── 📂 docs/                  # 项目文档
    ├── 📂 landing-page/     # 着陆页文档
    ├── 📂 design/           # 设计系统文档
    └── 📂 product/          # 产品文档
```

## 关键技术栈

- **前端框架**: Next.js 15 with App Router
- **认证系统**: Better Auth (替代 Supabase Auth)
- **数据库**: Supabase (仅用于数据存储)
- **支付处理**: Stripe
- **状态管理**: React Query (TanStack Query)
- **UI 组件**: ShadCN/UI + Radix UI
- **样式系统**: Tailwind CSS
- **类型系统**: TypeScript
- **邮件服务**: Resend
- **国际化**: Next-Intl

## 目录使用规则

### 1. 应用路由 (`app/`)
- 使用 Next.js 15 App Router
- 路由组使用括号 `(group)` 命名
- 每个页面包含 `page.tsx`
- 布局文件命名为 `layout.tsx`
- API 路由放在 `api/` 目录下

### 2. 组件组织 (`components/`)
- `ui/`: ShadCN UI 基础组件
- `layout/`: 页面布局相关组件
- `user/`: 用户功能相关组件
- 组件使用 PascalCase 命名
- 每个复杂组件有独立目录

### 3. Hooks (`hooks/`)
- 自定义 Hooks 使用 `use` 前缀
- 数据相关操作使用 React Query
- 每个 Hook 有明确的职责

### 4. 库文件 (`lib/`)
- 第三方服务配置
- 工具函数
- 上下文提供者
- 类型安全的客户端实例

### 5. 数据库 (`supabase/`)
- 只用于数据存储，不用于认证
- 客户端和服务器端实例分离
- 迁移文件按时间戳命名

## 命名约定

### 文件命名
- React 组件: `PascalCase.tsx`
- 工具函数: `camelCase.ts`
- 配置文件: `kebab-case.ts`
- 页面文件: `page.tsx`
- 布局文件: `layout.tsx`

### 目录命名
- 使用 `kebab-case`
- 路由组使用括号 `(group-name)`
- 描述性和功能性命名

## 导入路径约定

使用绝对路径和别名：

```typescript
// 组件导入
import { Button } from '@/components/ui/button'
import { Header } from '@/components/layout/Header'

// Hook 导入
import { useAuth } from '@/lib/auth-context'
import { useClientFetch } from '@/hooks/use-client-fetch'

// 工具函数导入
import { cn } from '@/lib/utils'

// 类型导入
import type { User } from '@/types'
```

## 最佳实践

1. **关注点分离**: 每个目录和文件有明确的职责
2. **代码复用**: 共享组件和 Hooks 放在适当位置
3. **类型安全**: 所有组件和函数都有类型定义
4. **性能优化**: 合理使用 React Query 缓存
5. **国际化支持**: 所有文本都通过 i18n 系统处理

## 新功能开发流程

1. **页面开发**: 在 `app/` 下创建新路由
2. **组件开发**: 在 `components/` 下创建可复用组件
3. **数据操作**: 使用 `hooks/` 中的数据 Hooks
4. **API 开发**: 在 `app/api/` 下创建 API 路由
5. **类型定义**: 在 `types/` 下定义相关类型
