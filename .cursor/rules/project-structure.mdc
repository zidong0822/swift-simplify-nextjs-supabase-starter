---
description: 
globs: 
alwaysApply: false
---
# 项目结构指南

本项目是一个使用 Next.js 和 Supabase 构建的全栈应用程序。以下是主要目录结构的说明：

## 核心目录
- [app/](mdc:app) - Next.js 应用程序的主要目录，包含所有页面和路由
- [components/](mdc:components) - 可重用的 React 组件
- [lib/](mdc:lib) - 工具函数、类型定义和共享代码
- [hooks/](mdc:hooks) - 自定义 React Hooks
- [supabase/](mdc:supabase) - Supabase 相关配置和迁移文件

## 配置文件
- [next.config.ts](mdc:next.config.ts) - Next.js 配置
- [tailwind.config.ts](mdc:tailwind.config.ts) - Tailwind CSS 配置
- [tsconfig.json](mdc:tsconfig.json) - TypeScript 配置

## 重要说明
1. 所有新页面应放在 `app` 目录下的适当位置
2. 共享组件应放在 `components` 目录中
3. 数据库相关的代码应放在 `supabase` 目录中
4. 工具函数应放在 `lib` 目录中

# 项目结构规则

## 目录结构

```
📦 项目根目录
├── 📂 app/                # Next.js 应用目录
│   ├── 📂 (auth)/        # 认证相关页面
│   ├── 📂 (dashboard)/   # 仪表板相关页面
│   ├── 📂 api/          # API 路由
│   └── 📂 components/   # 共享组件
├── 📂 lib/              # 工具函数和类型定义
├── 📂 styles/           # 全局样式和主题
├── 📂 public/           # 静态资源
├── 📂 docs/             # 项目文档
│   ├── 📂 product/      # 产品文档
│   ├── 📂 design/       # 设计文档
│   └── 📂 api/          # API 文档
└── 📂 .cursor/          # Cursor IDE 配置
    └── 📂 rules/        # 开发规则和指南
```

## 命名规范

1. **目录命名**
   - 使用小写字母
   - 使用连字符分隔单词
   - 使用描述性名称

2. **文件命名**
   - React 组件使用 PascalCase
   - 工具函数使用 camelCase
   - 类型定义文件使用 `.d.ts` 后缀
   - 样式文件使用 `.module.css` 后缀

## 模块组织

1. **组件结构**
   ```
   components/
   ├── ui/           # 基础 UI 组件
   ├── layout/       # 布局组件
   ├── forms/        # 表单相关组件
   └── features/     # 业务功能组件
   ```

2. **API 结构**
   ```
   api/
   ├── auth/         # 认证相关 API
   ├── users/        # 用户相关 API
   └── [resource]/   # 资源相关 API
   ```

## 导入规则

1. **导入顺序**
   ```typescript
   // 1. React 和框架导入
   import { useState } from 'react'
   import { useRouter } from 'next/router'
   
   // 2. 第三方库导入
   import { motion } from 'framer-motion'
   
   // 3. 组件导入
   import { Button } from '@/components/ui'
   
   // 4. 工具函数导入
   import { formatDate } from '@/lib/utils'
   
   // 5. 类型导入
   import type { User } from '@/types'
   
   // 6. 样式导入
   import styles from './styles.module.css'
   ```

2. **路径别名**
   - 使用 `@/` 作为项目根目录别名
   - 避免使用相对路径的 `../`
