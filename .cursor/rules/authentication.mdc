# Better Auth 认证系统指南

## 技术栈

本项目使用 **Better Auth** 作为认证解决方案，提供现代化、类型安全的认证体验。

### 为什么选择 Better Auth

- ✅ **类型安全**: 完整的 TypeScript 支持
- ✅ **现代化**: 支持最新的认证标准
- ✅ **灵活性**: 高度可定制的认证流程
- ✅ **社交登录**: 内置多种社交平台支持
- ✅ **邮箱验证**: 内置邮箱验证功能
- ✅ **会话管理**: 安全的会话处理

## 核心配置

### 服务器端配置
```typescript
// lib/auth.ts
import { betterAuth } from "better-auth";
import { Pool } from "pg";
import { Resend } from "resend";

export const auth = betterAuth({
  baseURL: process.env.BETTER_AUTH_URL || "http://localhost:3000/api/auth",
  secret: process.env.BETTER_AUTH_SECRET,
  database: new Pool({
    connectionString: process.env.DATABASE_URL,
  }),
  emailVerification: {
    sendVerificationEmail: async (data) => {
      // 使用 Resend 发送验证邮件
    },
  },
  emailAndPassword: {
    enabled: true,
    requireEmailVerification: false,
  },
  socialProviders: {
    github: {
      clientId: process.env.CLIENT_ID_GITHUB,
      clientSecret: process.env.CLIENT_SECRET_GITHUB,
    },
    google: {
      clientId: process.env.CLIENT_ID_GOOGLE,
      clientSecret: process.env.CLIENT_SECRET_GOOGLE,
    },
  },
});
```

### 客户端配置
```typescript
// lib/auth-client.ts
import { createAuthClient } from "better-auth/react";

export const authClient = createAuthClient({
  baseURL: typeof window !== 'undefined' 
    ? `${window.location.origin}/api/auth`
    : process.env.NEXT_PUBLIC_APP_URL 
      ? `${process.env.NEXT_PUBLIC_APP_URL}/api/auth`
      : "http://localhost:3000/api/auth",
});

export const { signIn, signOut, signUp, useSession } = authClient;
```

## 认证上下文

### AuthContext 提供者
```typescript
// lib/auth-context.tsx
"use client";

import { useSession } from "@/lib/auth-client";
import { createContext, useContext } from "react";

interface User {
  id: string;
  email: string;
  name: string;
  image?: string | null;
  emailVerified: boolean;
  createdAt: Date;
  updatedAt: Date;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const { data: session, isPending: loading } = useSession();

  const user = session?.user ? {
    id: session.user.id,
    email: session.user.email,
    name: session.user.name,
    image: session.user.image,
    emailVerified: session.user.emailVerified,
    createdAt: session.user.createdAt,
    updatedAt: session.user.updatedAt,
  } : null;

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used inside an AuthProvider");
  }
  return context;
}
```

## 认证流程

### 1. 用户注册
```typescript
// 邮箱密码注册
const handleSignUp = async (email: string, password: string, name: string) => {
  try {
    await signUp.email({
      email,
      password,
      name,
    });
    // 注册成功，可选择发送验证邮件
  } catch (error) {
    console.error("注册失败:", error);
  }
};

// 社交登录注册
const handleSocialSignUp = async (provider: 'github' | 'google') => {
  try {
    await signIn.social({
      provider,
      callbackURL: "/dashboard",
    });
  } catch (error) {
    console.error("社交登录失败:", error);
  }
};
```

### 2. 用户登录
```typescript
// 邮箱密码登录
const handleSignIn = async (email: string, password: string) => {
  try {
    await signIn.email({
      email,
      password,
    });
    // 登录成功，重定向到仪表板
  } catch (error) {
    console.error("登录失败:", error);
  }
};
```

### 3. 用户登出
```typescript
const handleSignOut = async () => {
  try {
    await signOut();
    // 登出成功，重定向到首页
  } catch (error) {
    console.error("登出失败:", error);
  }
};
```

## 路由保护

### 中间件保护
```typescript
// middleware.ts
import { betterFetch } from "@better-fetch/fetch";
import type { Session } from "better-auth/types";
import { NextRequest, NextResponse } from "next/server";

export default async function authMiddleware(request: NextRequest) {
  const { data: session } = await betterFetch<Session>(
    "/api/auth/get-session",
    {
      baseURL: request.nextUrl.origin,
      headers: {
        cookie: request.headers.get("cookie") || "",
      },
    }
  );

  // 保护仪表板路由
  if (request.nextUrl.pathname.startsWith("/dashboard")) {
    if (!session) {
      return NextResponse.redirect(new URL("/login", request.url));
    }
  }

  // 重定向已登录用户
  if (request.nextUrl.pathname.startsWith("/login") || 
      request.nextUrl.pathname.startsWith("/register")) {
    if (session) {
      return NextResponse.redirect(new URL("/dashboard", request.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/dashboard/:path*", "/login", "/register"],
};
```

### 组件级保护
```typescript
// components/ProtectedRoute.tsx
"use client";

import { useAuth } from "@/lib/auth-context";
import { useRouter } from "next/navigation";
import { useEffect } from "react";

interface ProtectedRouteProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export function ProtectedRoute({ children, fallback }: ProtectedRouteProps) {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.push("/login");
    }
  }, [user, loading, router]);

  if (loading) {
    return fallback || <div>Loading...</div>;
  }

  if (!user) {
    return null;
  }

  return <>{children}</>;
}
```

## 表单组件

### 登录表单
```typescript
// app/(auth)/login/login-form.tsx
"use client";

import { useState } from "react";
import { signIn } from "@/lib/auth-client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

export function LoginForm() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      await signIn.email({
        email,
        password,
      });
    } catch (error) {
      console.error("登录失败:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Input
        type="email"
        placeholder="邮箱"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <Input
        type="password"
        placeholder="密码"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />
      <Button type="submit" disabled={loading} className="w-full">
        {loading ? "登录中..." : "登录"}
      </Button>
    </form>
  );
}
```

### 注册表单
```typescript
// app/(auth)/register/register-form.tsx
"use client";

import { useState } from "react";
import { signUp } from "@/lib/auth-client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

export function RegisterForm() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      await signUp.email({
        email: formData.email,
        password: formData.password,
        name: formData.name,
      });
    } catch (error) {
      console.error("注册失败:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Input
        type="text"
        placeholder="姓名"
        value={formData.name}
        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
        required
      />
      <Input
        type="email"
        placeholder="邮箱"
        value={formData.email}
        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
        required
      />
      <Input
        type="password"
        placeholder="密码"
        value={formData.password}
        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
        required
      />
      <Button type="submit" disabled={loading} className="w-full">
        {loading ? "注册中..." : "注册"}
      </Button>
    </form>
  );
}
```

## 环境变量配置

### 必需的环境变量
```bash
# Better Auth 核心配置
BETTER_AUTH_SECRET="your-super-secret-key-here-must-be-at-least-32-characters-long"
BETTER_AUTH_URL="http://localhost:3000/api/auth"

# 数据库连接
DATABASE_URL="postgresql://postgres:password@localhost:5432/database"

# 邮件服务 (Resend)
RESEND_API_KEY="re_your_resend_api_key_here"
EMAIL_FROM="noreply@yourdomain.com"

# 社交登录 (可选)
CLIENT_ID_GITHUB="your_github_client_id"
CLIENT_SECRET_GITHUB="your_github_client_secret"
CLIENT_ID_GOOGLE="your_google_client_id"
CLIENT_SECRET_GOOGLE="your_google_client_secret"

# 应用配置
NEXT_PUBLIC_APP_URL="http://localhost:3000"
```

## 最佳实践

### 1. 安全性
- 使用强密码策略
- 启用邮箱验证
- 实施速率限制
- 定期轮换密钥

### 2. 用户体验
- 提供清晰的错误提示
- 支持多种登录方式
- 实现密码重置功能
- 优化加载状态

### 3. 错误处理
```typescript
const handleAuthError = (error: any) => {
  switch (error.code) {
    case 'INVALID_CREDENTIALS':
      return '邮箱或密码错误';
    case 'EMAIL_ALREADY_EXISTS':
      return '该邮箱已被注册';
    case 'WEAK_PASSWORD':
      return '密码强度不足';
    default:
      return '发生未知错误，请稍后再试';
  }
};
```

### 4. 类型安全
```typescript
// 扩展用户类型
interface ExtendedUser extends User {
  role?: 'admin' | 'user';
  subscription?: {
    plan: string;
    status: string;
  };
}

// 使用类型守卫
function isAuthenticatedUser(user: User | null): user is User {
  return user !== null;
}
```

## 测试策略

### 1. 单元测试
- 测试认证函数
- 测试表单验证
- 测试错误处理

### 2. 集成测试
- 测试完整的认证流程
- 测试社交登录
- 测试路由保护

### 3. E2E 测试
- 测试用户注册到登录的完整流程
- 测试密码重置功能
- 测试会话管理
description:
globs:
alwaysApply: false
---
