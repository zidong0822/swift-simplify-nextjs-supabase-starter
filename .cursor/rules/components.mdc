---
description: 
globs: 
alwaysApply: false
---
# 组件开发指南

## 组件结构
- 组件应放在 [components/](mdc:components) 目录中
- 按功能或页面分组组件
- 使用 index.ts 文件导出组件

## 组件设计原则
- 遵循单一职责原则
- 保持组件的可复用性
- 使用适当的 Props 类型定义
- 实现必要的错误边界

## UI 组件库
- 优先使用 shadcn/ui 组件
- 自定义组件应遵循相同的设计语言
- 保持一致的主题和样式

## 状态管理
- 使用 React Context 进行全局状态管理
- 复杂状态使用 Zustand 或类似工具
- 避免过度使用全局状态

## 性能优化
- 适当使用 React.memo()
- 实现必要的懒加载
- 优化重渲染
- 使用适当的键值进行列表渲染

## 可访问性
- 遵循 WCAG 2.1 指南
- 使用语义化 HTML
- 提供适当的 ARIA 标签
- 确保键盘可访问性

## 测试
- 编写单元测试
- 实现集成测试
- 进行可访问性测试
- 使用 Storybook 进行组件文档化

# 组件开发规则

## 组件结构

1. **文件组织**
   ```
   ComponentName/
   ├── index.tsx        # 组件主文件
   ├── styles.module.css # 组件样式
   ├── animations.ts    # 动画配置
   ├── types.ts         # 类型定义
   └── utils.ts         # 工具函数
   ```

2. **组件定义**
   ```tsx
   // 使用函数组件和箭头函数
   const ComponentName: React.FC<Props> = ({ prop1, prop2 }) => {
     return (
       <div>
         {/* 组件内容 */}
       </div>
     )
   }
   ```

## 动画规范

1. **动画组件封装**
   ```tsx
   // 创建可重用的动画组件
   import { FadeIn } from 'animate-ui'
   
   export const AnimatedCard = ({ children }) => (
     <FadeIn duration={0.3}>
       {children}
     </FadeIn>
   )
   ```

2. **动画性能**
   - 使用 `will-change` 提示
   - 避免频繁的 DOM 更新
   - 优先使用 GPU 加速属性

3. **动画可访问性**
   ```tsx
   // 支持减少动画
   const shouldReduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches

   const animationProps = shouldReduceMotion 
     ? { duration: 0 }
     : { duration: 0.3 }
   ```

## 命名规范

1. **组件命名**
   - 使用 PascalCase
   - 描述性和功能性命名
   - 避免通用名称

2. **Props 命名**
   - 使用 camelCase
   - 布尔值使用 is/has/should 前缀
   - 事件处理器使用 on/handle 前缀

## 最佳实践

1. **状态管理**
   - 使用 React Query 管理服务器状态
   - 使用 Context 管理全局状态
   - 使用 useState 管理局部状态

2. **性能优化**
   - 使用 useMemo 缓存计算结果
   - 使用 useCallback 缓存函数
   - 使用 React.memo 避免不必要渲染
   - 优化动画性能

3. **错误处理**
   - 使用错误边界捕获渲染错误
   - 提供友好的错误提示
   - 记录错误日志

4. **可访问性**
   - 使用语义化 HTML
   - 添加 ARIA 属性
   - 确保键盘可访问性
   - 支持动画减弱选项

## 动画指南

1. **何时使用动画**
   - 状态变化反馈
   - 用户交互响应
   - 内容过渡效果
   - 引导用户注意

2. **动画持续时间**
   - 极短动画：100-200ms
   - 短动画：200-300ms
   - 中等动画：300-500ms
   - 长动画：500-1000ms

3. **动画触发时机**
   - 组件挂载/卸载
   - 用户交互
   - 数据更新
   - 路由变化

4. **动画组合**
   ```tsx
   // 组合多个动画效果
   const AnimatedFeature = () => (
     <FadeIn>
       <SlideUp>
         <ScaleIn>
           <div>特性内容</div>
         </ScaleIn>
       </SlideUp>
     </FadeIn>
   )
   ```

## 样式指南

1. **CSS Modules**
   ```css
   /* 使用 BEM 命名约定 */
   .component {}
   .component__element {}
   .component--modifier {}
   ```

2. **主题变量**
   ```css
   .component {
     color: var(--color-primary);
     font-size: var(--text-base);
     padding: var(--spacing-4);
   }
   ```

3. **响应式设计**
   ```css
   @media (min-width: var(--breakpoint-md)) {
     .component {
       /* 响应式样式 */
     }
   }
   ```

## 测试规范

1. **单元测试**
   - 测试组件渲染
   - 测试用户交互
   - 测试错误处理

2. **集成测试**
   - 测试组件间交互
   - 测试数据流
   - 测试路由跳转

## 文档要求

1. **组件文档**
   - 组件描述
   - Props 说明
   - 使用示例
   - 注意事项

2. **Storybook**
   - 创建组件故事
   - 展示不同状态
   - 添加交互示例
