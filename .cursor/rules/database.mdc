# 数据库指南

## 技术栈说明

⚠️ **重要**: 本项目使用 **Better Auth** 进行身份验证，**Supabase 仅用于数据存储**

- ✅ **Supabase Database** - 数据存储和查询
- ✅ **Better Auth** - 身份验证和会话管理
- ❌ ~~Supabase Auth~~ - 已移除

## 数据库配置

### 连接配置
```typescript
// supabase/client.ts - 客户端实例
import { createClient } from '@supabase/supabase-js'

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

// supabase/server.ts - 服务器实例  
import { createClient } from '@supabase/supabase-js'

export const createServerClient = () => {
  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  )
}
```

### Better Auth 表结构

Better Auth 会自动创建以下表：
- `user` - 用户基本信息
- `session` - 会话管理
- `account` - 社交登录账户关联
- `verification` - 邮箱验证

### 自定义业务表

创建额外的业务数据表：

```sql
-- 支付相关表
CREATE TABLE payments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL, -- 引用 Better Auth 的 user.id
  amount DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) NOT NULL DEFAULT 'USD',
  status VARCHAR(50) NOT NULL,
  stripe_payment_intent_id TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 用户订阅表
CREATE TABLE subscriptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL, -- 引用 Better Auth 的 user.id
  stripe_subscription_id TEXT UNIQUE NOT NULL,
  status VARCHAR(50) NOT NULL,
  plan_name VARCHAR(100) NOT NULL,
  current_period_end TIMESTAMPTZ NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

## 数据访问模式

### 1. 客户端数据获取
使用自定义 Hooks：

```typescript
// hooks/use-client-fetch.ts
import { useQuery } from "@tanstack/react-query";
import { createClient } from "@/supabase/client";

export function useClientFetch<T>(
  key: string,
  table: string,
  cache?: number,
  filters?: (query: any) => any
) {
  const supabase = createClient();
  
  return useQuery<T[]>({
    queryKey: [key],
    queryFn: async () => {
      let query = supabase.from(table).select("*");
      if (filters) query = filters(query);
      
      const { data, error } = await query;
      if (error) throw error;
      
      return data as T[];
    },
    staleTime: cache ? cache : 0,
  });
}
```

### 2. 客户端数据修改
使用数据修改 Hook：

```typescript
// hooks/use-client-mutation.ts
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { createClient } from "@/supabase/client";

export function useClientMutate(
  table: string,
  action: "insert" | "update" | "delete"
) {
  const supabase = createClient();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (payload: any) => {
      let response: any;

      if (action === "insert")
        response = await supabase.from(table).insert(payload);
      if (action === "update")
        response = await supabase.from(table).update(payload).match({ id: payload.id });
      if (action === "delete")
        response = await supabase.from(table).delete().match({ id: payload.id });

      if (response.error) throw response.error;
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [table], exact: false });
    },
  });
}
```

## 表设计规范

### 1. 命名约定
- 表名使用复数形式：`users`, `posts`, `comments`
- 字段名使用蛇形命名：`user_id`, `created_at`, `stripe_customer_id`
- 主键统一使用 `id`
- 外键使用 `表名_id` 格式

### 2. 标准字段
每个表应包含：
```sql
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
created_at TIMESTAMPTZ DEFAULT NOW(),
updated_at TIMESTAMPTZ DEFAULT NOW()
```

### 3. 用户关联
与 Better Auth 用户关联：
```sql
-- 使用 TEXT 类型，因为 Better Auth 的 user.id 是字符串
user_id TEXT NOT NULL REFERENCES user(id) ON DELETE CASCADE
```

## 行级安全策略 (RLS)

### 基本 RLS 策略

```sql
-- 启用 RLS
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- 用户只能查看自己的数据
CREATE POLICY "Users can view own payments" ON payments
  FOR SELECT
  USING (user_id = (SELECT id FROM user WHERE id = auth.jwt() ->> 'sub'));

-- 用户只能插入自己的数据  
CREATE POLICY "Users can insert own payments" ON payments
  FOR INSERT
  WITH CHECK (user_id = (SELECT id FROM user WHERE id = auth.jwt() ->> 'sub'));
```

### Better Auth 集成的 RLS

由于使用 Better Auth，需要自定义认证检查：

```sql
-- 创建认证函数
CREATE OR REPLACE FUNCTION auth.user_id()
RETURNS TEXT
LANGUAGE sql
STABLE
AS $$
  SELECT COALESCE(
    current_setting('request.jwt.claims', true)::json ->> 'sub',
    (current_setting('request.jwt.claims', true)::json ->> 'user_id')
  )::text
$$;

-- 使用认证函数的策略
CREATE POLICY "Users can view own data" ON payments
  FOR SELECT
  USING (user_id = auth.user_id());
```

## 数据迁移

### 迁移文件管理
迁移文件放在 `supabase/migrations/` 目录：

```
supabase/migrations/
├── 20240315120000_better_auth_schema.sql
├── 20240315120100_create_payments_table.sql
└── 20240315120200_create_subscriptions_table.sql
```

### 迁移文件示例

```sql
-- 20240315120100_create_payments_table.sql
CREATE TABLE IF NOT EXISTS payments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL,
  amount DECIMAL(10,2) NOT NULL CHECK (amount >= 0),
  currency VARCHAR(3) NOT NULL DEFAULT 'USD',
  status VARCHAR(50) NOT NULL CHECK (status IN ('pending', 'succeeded', 'failed', 'canceled')),
  stripe_payment_intent_id TEXT,
  metadata JSONB DEFAULT '{}'::jsonb,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 创建索引
CREATE INDEX idx_payments_user_id ON payments(user_id);
CREATE INDEX idx_payments_status ON payments(status);
CREATE INDEX idx_payments_created_at ON payments(created_at);

-- 启用 RLS
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- 创建 RLS 策略
CREATE POLICY "Users can view own payments" ON payments
  FOR SELECT
  USING (user_id = auth.user_id());

-- 创建更新时间戳触发器
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON payments
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();
```

## 性能优化

### 1. 索引策略
```sql
-- 常用查询字段
CREATE INDEX idx_payments_user_status ON payments(user_id, status);
CREATE INDEX idx_subscriptions_user_status ON subscriptions(user_id, status);

-- 时间范围查询
CREATE INDEX idx_payments_created_at_desc ON payments(created_at DESC);

-- 部分索引（只索引有效数据）
CREATE INDEX idx_active_subscriptions ON subscriptions(user_id) 
  WHERE status = 'active';
```

### 2. 查询优化
```typescript
// 使用选择器减少数据传输
const { data } = await supabase
  .from('payments')
  .select('id, amount, status, created_at')
  .eq('user_id', userId)
  .order('created_at', { ascending: false })
  .limit(10);

// 使用过滤器减少数据量
const { data } = await supabase
  .from('subscriptions')
  .select('*')
  .eq('user_id', userId)
  .eq('status', 'active')
  .single();
```

## 数据类型规范

### 1. 常用数据类型
```sql
-- 标识符
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
user_id TEXT NOT NULL

-- 金额
amount DECIMAL(10,2) NOT NULL

-- 状态枚举
status payment_status NOT NULL

-- 时间戳
created_at TIMESTAMPTZ DEFAULT NOW()

-- JSON 数据
metadata JSONB DEFAULT '{}'::jsonb

-- 文本
title TEXT NOT NULL
description TEXT
```

### 2. 枚举类型
```sql
-- 创建枚举类型
CREATE TYPE payment_status AS ENUM ('pending', 'succeeded', 'failed', 'canceled');
CREATE TYPE subscription_status AS ENUM ('active', 'canceled', 'past_due', 'unpaid');

-- 使用枚举类型
status payment_status NOT NULL DEFAULT 'pending'
```

## 最佳实践

1. **数据一致性**: 使用外键约束确保数据完整性
2. **性能优化**: 为常用查询字段创建索引
3. **安全策略**: 所有表启用 RLS 并设置适当策略
4. **数据备份**: 定期备份重要数据
5. **监控查询**: 监控慢查询并优化
6. **版本控制**: 所有数据库更改通过迁移文件管理

     BEFORE UPDATE ON users
     FOR EACH ROW
     EXECUTE FUNCTION update_updated_at_column();
   ```
