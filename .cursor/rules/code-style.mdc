---
description: 
globs: 
alwaysApply: false
---
# 代码风格指南

## TypeScript
- 始终使用 TypeScript 而不是 JavaScript
- 为所有组件和函数定义适当的类型
- 避免使用 `any` 类型，优先使用 `unknown`

## React 组件
- 使用函数组件和 Hooks
- 组件名称使用 PascalCase
- Props 接口命名为 `[组件名]Props`
- 导出的组件应该有适当的 JSDoc 注释

## 样式
- 使用 Tailwind CSS 进行样式设置
- 复杂的样式组合应该提取为可重用的类
- 遵循移动优先的响应式设计原则

## 导入顺序
1. React 和 Next.js 相关导入
2. 第三方库导入
3. 内部组件导入
4. 工具函数导入
5. 类型导入
6. 样式导入

## 命名约定
- 文件名使用 kebab-case
- 组件文件名使用 PascalCase
- 工具函数使用 camelCase
- 常量使用 UPPER_SNAKE_CASE

## 错误处理
- 使用 try/catch 处理异步操作
- 提供有意义的错误消息
- 在适当的地方使用错误边界

# 代码风格规则

## TypeScript 规范

1. **类型定义**
   ```typescript
   // 使用 interface 定义对象类型
   interface User {
     id: string
     name: string
     email: string
   }

   // 使用 type 定义联合类型或交叉类型
   type Status = 'active' | 'inactive'
   type Theme = 'light' | 'dark'
   ```

2. **类型断言**
   ```typescript
   // 优先使用 as 语法
   const value = someValue as string

   // 避免使用 <> 语法
   // const value = <string>someValue  // 不推荐
   ```

## React 规范

1. **Hooks 规则**
   - 只在顶层使用 Hooks
   - 使用自定义 Hooks 封装逻辑
   - 遵循 Hooks 命名规范（use 前缀）

2. **组件属性**
   ```tsx
   // 属性排序
   <Component
     // 1. 标准 Props
     id="id"
     className="class"
     // 2. 数据 Props
     data={data}
     items={items}
     // 3. 回调函数
     onClick={handleClick}
     onChange={handleChange}
     // 4. 渲染 Props
     renderItem={renderItem}
   />
   ```

## 格式规范

1. **缩进和空格**
   - 使用 2 个空格缩进
   - 大括号前后保留空格
   - 运算符前后保留空格

2. **分号和逗号**
   - 语句结尾不加分号
   - 对象和数组使用尾逗号

3. **引号使用**
   - JSX 属性使用双引号
   - JavaScript 字符串使用单引号
   - 模板字符串使用反引号

## 注释规范

1. **文件注释**
   ```typescript
   /**
    * @file 文件描述
    * @author 作者
    * @description 详细描述
    */
   ```

2. **函数注释**
   ```typescript
   /**
    * 函数描述
    * @param {string} param1 - 参数1描述
    * @param {number} param2 - 参数2描述
    * @returns {boolean} 返回值描述
    */
   ```

3. **组件注释**
   ```typescript
   /**
    * 组件描述
    * @component
    * @example
    * ```tsx
    * <ComponentName prop1="value1" prop2={value2} />
    * ```
    */
   ```

## 命名规范

1. **变量命名**
   - 使用有意义的描述性名称
   - 避免单字母变量（除循环计数器外）
   - 布尔值使用 is/has/should 前缀

2. **函数命名**
   - 动词开头（get/set/update/handle等）
   - 清晰表达功能意图
   - 避免过长的函数名

3. **文件命名**
   - 组件文件使用 PascalCase
   - 工具文件使用 camelCase
   - 常量文件使用 UPPER_SNAKE_CASE

## 最佳实践

1. **代码组织**
   - 相关代码放在一起
   - 按照功能分组
   - 保持文件结构清晰

2. **错误处理**
   - 使用 try/catch 处理异步错误
   - 提供有意义的错误信息
   - 避免吞掉错误

3. **性能考虑**
   - 避免不必要的渲染
   - 及时清理副作用
   - 优化大型列表渲染
